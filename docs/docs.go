// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/heatlhcheck": {
            "get": {
                "description": "Check the health of the service",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mutant"
                ],
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "Status OK",
                        "schema": {
                            "$ref": "#/definitions/model.HealthCheckResponse"
                        }
                    }
                }
            }
        },
        "/mutant": {
            "post": {
                "description": "Validates whether the DNA strand is human or mutant",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mutant"
                ],
                "summary": "DNA strand is human or mutant",
                "parameters": [
                    {
                        "description": "DNA strand",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.inputDNA"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DNA is mutant",
                        "schema": {
                            "$ref": "#/definitions/controller.mutantResponse"
                        }
                    },
                    "400": {
                        "description": "Input error",
                        "schema": {
                            "$ref": "#/definitions/controller.inputErrorResponse"
                        }
                    },
                    "403": {
                        "description": "DNA is human",
                        "schema": {
                            "$ref": "#/definitions/controller.humanResponse"
                        }
                    },
                    "500": {
                        "description": "Errors found",
                        "schema": {
                            "$ref": "#/definitions/controller.serverErrorResponse"
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "description": "Obtains the DNA statistics of mutants vs. humans.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mutant"
                ],
                "summary": "Stats for DNA mutants vs. humans",
                "responses": {
                    "200": {
                        "description": "Stats for DNA strand",
                        "schema": {
                            "$ref": "#/definitions/model.Stats"
                        }
                    },
                    "500": {
                        "description": "Errors found",
                        "schema": {
                            "$ref": "#/definitions/controller.serverErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.humanResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "DNA_HUMAN"
                }
            }
        },
        "controller.inputDNA": {
            "type": "object",
            "properties": {
                "dna": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "ATACA",
                        "AGGCT",
                        "AGCTC",
                        "ACCAA",
                        "CCATG"
                    ]
                }
            }
        },
        "controller.inputErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "STRAND_LENGTH_INVALID"
                }
            }
        },
        "controller.mutantResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "DNA_MUTANT"
                }
            }
        },
        "controller.serverErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "INTERNAL_SERVER_ERROR"
                }
            }
        },
        "model.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "model.Stats": {
            "type": "object",
            "properties": {
                "count_human_dna": {
                    "type": "integer"
                },
                "count_mutant_dna": {
                    "type": "integer"
                },
                "ratio": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
